{"ast":null,"code":"import { actionChannel, apply, put, select, take, call, takeEvery } from 'redux-saga/effects';\nimport { push } from 'connected-react-router';\nimport { userActions, getAllPostsAction } from '../actions/api';\nimport client from '../singletons/client';\nimport { GET_USER, GET_USER_SUCCESS, UPDATE_USER, SHOW_MESSAGE, FORM_ERROR, CLEAR_FORM_ERROR, CHANGE_PROFILE_PIC, CHANGE_PASSWORD, UPLOAD_POST, CLOSE_UPLOAD_POST, GET_PROFILE_POSTS, GET_PROFILE_POSTS_SUCCESS, GET_SUGGESTIONS, GET_SUGGESTIONS_SUCCESS, GET_USER_PROFILE, GET_USER_PROFILE_SUCCESS, FOLLOW, FOLLOW_SUCESS, FOLLOW_SUCESS_SUGGESTIONS, GET_ALL_POSTS, GET_ALL_POSTS_SUCCESS, DELETE_POST, LIKE, LIKE_POST_PROGRESS, UNLIKE_POST_PROGRESS, GET_LIKES, GET_LIKES_SUCCESS, FOLLOW_SUCESS_GENERIC } from '../constants';\nexport function* apiSaga() {\n  yield takeEvery(GET_USER, getUser);\n  yield takeEvery(UPDATE_USER, updateUser);\n  yield takeEvery(CHANGE_PROFILE_PIC, changeProfilePic);\n  yield takeEvery(CHANGE_PASSWORD, changePassword);\n  yield takeEvery(UPLOAD_POST, uploadPost);\n  yield takeEvery(GET_PROFILE_POSTS, getProfilePosts);\n  yield takeEvery(DELETE_POST, deletePost);\n  yield takeEvery(GET_SUGGESTIONS, getSuggestions);\n  yield takeEvery(GET_USER_PROFILE, getUserProfile);\n  yield takeEvery(FOLLOW, follow);\n  yield takeEvery(GET_ALL_POSTS, getAllPosts);\n  yield takeEvery(GET_LIKES, getLikes);\n  yield takeEvery(LIKE, updateLikeOnlyOnRedux);\n  const likePostChannel = yield actionChannel(LIKE);\n\n  while (true) {\n    const action = yield take(likePostChannel);\n    yield call(likePost, action);\n  }\n}\n\nfunction* deletePost({\n  path\n}) {\n  try {\n    const _ref = yield apply(client, client.delete, [path]),\n          message = _ref.message;\n\n    yield put({\n      type: SHOW_MESSAGE,\n      message\n    });\n    yield put(getAllPostsAction());\n    const id = yield select(({\n      api\n    }) => api.user.id);\n    yield put(userActions.get(id));\n  } catch (_ref2) {\n    let error = _ref2.error;\n    console.error(error);\n    return;\n  }\n}\n\nfunction* getLikes({\n  path,\n  key,\n  params\n}) {\n  try {\n    const _ref3 = yield apply(client, client.get, [path, '']),\n          data = _ref3.data;\n\n    yield put({\n      type: GET_LIKES_SUCCESS,\n      data,\n      key,\n      params\n    });\n    return;\n  } catch (_ref4) {\n    let error = _ref4.error;\n    console.error(error);\n    return;\n  }\n}\n\nfunction* getUser({\n  path,\n  params\n}) {\n  try {\n    const _ref5 = yield apply(client, client.get, [path, params]),\n          data = _ref5.data;\n\n    yield put({\n      type: GET_USER_SUCCESS,\n      data\n    });\n    return;\n  } catch (_ref6) {\n    let error = _ref6.error;\n    console.error(error);\n    yield put({\n      type: FORM_ERROR,\n      error\n    });\n    return;\n  }\n}\n\nfunction* updateUser({\n  path,\n  payload,\n  params\n}) {\n  try {\n    const _ref7 = yield apply(client, client.update, [path, params, payload]),\n          data = _ref7.data,\n          message = _ref7.message;\n\n    yield put({\n      type: GET_USER_SUCCESS,\n      data\n    });\n    yield put({\n      type: CLEAR_FORM_ERROR\n    });\n    yield put({\n      type: SHOW_MESSAGE,\n      message\n    });\n    return;\n  } catch (_ref8) {\n    let error = _ref8.error;\n    console.error(error);\n    yield put({\n      type: FORM_ERROR,\n      error\n    });\n    return;\n  }\n}\n\nfunction* changeProfilePic({\n  path,\n  payload,\n  params\n}) {\n  try {\n    const _ref9 = yield apply(client, client.post, [path, params, payload]),\n          data = _ref9.data,\n          message = _ref9.message;\n\n    yield put({\n      type: GET_USER_SUCCESS,\n      data\n    });\n    yield put({\n      type: SHOW_MESSAGE,\n      message\n    });\n    return;\n  } catch (_ref10) {\n    let error = _ref10.error;\n    console.error(error);\n    return;\n  }\n}\n\nfunction* changePassword({\n  path,\n  payload\n}) {\n  try {\n    const _ref11 = yield apply(client, client.update, [path, '', payload]),\n          message = _ref11.message;\n\n    yield put({\n      type: SHOW_MESSAGE,\n      message\n    });\n    const pathName = yield select(({\n      router\n    }) => router.location.pathname);\n    yield put(push(pathName));\n    return;\n  } catch (_ref12) {\n    let error = _ref12.error;\n    console.error(error);\n    yield put({\n      type: FORM_ERROR,\n      error\n    });\n    return;\n  }\n}\n\nfunction* uploadPost({\n  path,\n  payload\n}) {\n  try {\n    const _ref13 = yield apply(client, client.post, [path, '', payload]),\n          message = _ref13.message;\n\n    yield put({\n      type: CLOSE_UPLOAD_POST\n    });\n    yield put({\n      type: SHOW_MESSAGE,\n      message\n    });\n    const params = yield select(({\n      api\n    }) => api.user.id);\n    yield put(userActions.get(params));\n    yield put(getAllPostsAction());\n    return;\n  } catch (_ref14) {\n    let error = _ref14.error;\n    console.error(error);\n    return;\n  }\n}\n\nfunction* getProfilePosts({\n  path,\n  params\n}) {\n  try {\n    const _ref15 = yield apply(client, client.get, [path, params]),\n          data = _ref15.data;\n\n    yield put({\n      type: GET_PROFILE_POSTS_SUCCESS,\n      data\n    });\n    return;\n  } catch (_ref16) {\n    let error = _ref16.error;\n    console.error(error);\n    return;\n  }\n}\n\nfunction* getSuggestions({\n  path\n}) {\n  try {\n    const _ref17 = yield apply(client, client.get, [path, '']),\n          data = _ref17.data;\n\n    yield put({\n      type: GET_SUGGESTIONS_SUCCESS,\n      data\n    });\n    return;\n  } catch (_ref18) {\n    let error = _ref18.error;\n    console.error(error);\n    return;\n  }\n}\n\nfunction* getUserProfile({\n  path,\n  params,\n  key\n}) {\n  try {\n    const _ref19 = yield apply(client, client.get, [path, params]),\n          data = _ref19.data,\n          status = _ref19.status;\n\n    yield put({\n      type: GET_USER_PROFILE_SUCCESS,\n      data,\n      status,\n      key\n    });\n    return;\n  } catch (_ref20) {\n    let error = _ref20.error;\n    console.error(error);\n    return;\n  }\n}\n\nfunction* follow({\n  path,\n  params,\n  payload,\n  key,\n  namespace,\n  postId\n}) {\n  try {\n    const _ref21 = yield apply(client, client.post, [path, params, payload]),\n          ownerIsFollowing = _ref21.ownerIsFollowing,\n          status = _ref21.status;\n\n    switch (namespace) {\n      case 'profile':\n        {\n          yield put({\n            type: FOLLOW_SUCESS,\n            data: {\n              status,\n              ownerIsFollowing\n            },\n            key,\n            namespace\n          });\n          break;\n        }\n\n      case 'generic':\n        {\n          yield put({\n            type: FOLLOW_SUCESS_GENERIC,\n            data: {\n              status,\n              ownerIsFollowing,\n              id: params\n            },\n            key,\n            namespace,\n            postId\n          });\n          yield put(getAllPostsAction());\n          break;\n        }\n\n      case 'post':\n        {\n          yield put({\n            type: FOLLOW_SUCESS_SUGGESTIONS,\n            data: {\n              status,\n              ownerIsFollowing,\n              id: params\n            },\n            key\n          });\n          yield put(getAllPostsAction());\n          break;\n        }\n\n      default:\n        {\n          yield put({\n            type: FOLLOW_SUCESS_SUGGESTIONS,\n            data: {\n              status,\n              ownerIsFollowing,\n              id: params\n            },\n            key\n          });\n          break;\n        }\n    }\n\n    const id = yield select(({\n      api\n    }) => api.user.id);\n    yield put(userActions.get(id));\n  } catch (_ref22) {\n    let error = _ref22.error;\n    console.error(error);\n    return;\n  }\n}\n\nfunction* getAllPosts({\n  path\n}) {\n  try {\n    const _ref23 = yield apply(client, client.get, [path, '']),\n          data = _ref23.data;\n\n    yield put({\n      type: GET_ALL_POSTS_SUCCESS,\n      data\n    });\n    return;\n  } catch (_ref24) {\n    let error = _ref24.error;\n    console.error(error);\n    return;\n  }\n}\n\nfunction* likePost({\n  path,\n  params\n}) {\n  try {\n    if (params.type === 'like') {\n      yield apply(client, client.post, [path, '']);\n    } else if (params.type === 'unlike') {\n      yield apply(client, client.post, [path, '']);\n    }\n\n    return;\n  } catch (_ref25) {\n    let error = _ref25.error;\n    console.error(error);\n    yield put({\n      type: SHOW_MESSAGE,\n      message: 'Failed to complete this action.'\n    });\n    return;\n  }\n}\n\nfunction* updateLikeOnlyOnRedux({\n  params\n}) {\n  if (params.type === 'like') {\n    yield put({\n      type: LIKE_POST_PROGRESS,\n      id: params.id\n    });\n  } else if (params.type === 'unlike') {\n    yield put({\n      type: UNLIKE_POST_PROGRESS,\n      id: params.id\n    });\n  }\n\n  return;\n}","map":{"version":3,"sources":["/home/abade/projects/instagram-web-clone/src/redux/sagas/api.js"],"names":["actionChannel","apply","put","select","take","call","takeEvery","push","userActions","getAllPostsAction","client","GET_USER","GET_USER_SUCCESS","UPDATE_USER","SHOW_MESSAGE","FORM_ERROR","CLEAR_FORM_ERROR","CHANGE_PROFILE_PIC","CHANGE_PASSWORD","UPLOAD_POST","CLOSE_UPLOAD_POST","GET_PROFILE_POSTS","GET_PROFILE_POSTS_SUCCESS","GET_SUGGESTIONS","GET_SUGGESTIONS_SUCCESS","GET_USER_PROFILE","GET_USER_PROFILE_SUCCESS","FOLLOW","FOLLOW_SUCESS","FOLLOW_SUCESS_SUGGESTIONS","GET_ALL_POSTS","GET_ALL_POSTS_SUCCESS","DELETE_POST","LIKE","LIKE_POST_PROGRESS","UNLIKE_POST_PROGRESS","GET_LIKES","GET_LIKES_SUCCESS","FOLLOW_SUCESS_GENERIC","apiSaga","getUser","updateUser","changeProfilePic","changePassword","uploadPost","getProfilePosts","deletePost","getSuggestions","getUserProfile","follow","getAllPosts","getLikes","updateLikeOnlyOnRedux","likePostChannel","action","likePost","path","delete","message","type","id","api","user","get","error","console","key","params","data","payload","update","post","pathName","router","location","pathname","status","namespace","postId","ownerIsFollowing"],"mappings":"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","sourcesContent":["import {\n  actionChannel,\n  apply,\n  put,\n  select,\n  take,\n  call,\n  takeEvery\n} from 'redux-saga/effects';\nimport { push } from 'connected-react-router';\n\nimport { userActions, getAllPostsAction } from '../actions/api';\n\nimport client from '../singletons/client';\n\nimport {\n  GET_USER,\n  GET_USER_SUCCESS,\n  UPDATE_USER,\n  SHOW_MESSAGE,\n  FORM_ERROR,\n  CLEAR_FORM_ERROR,\n  CHANGE_PROFILE_PIC,\n  CHANGE_PASSWORD,\n  UPLOAD_POST,\n  CLOSE_UPLOAD_POST,\n  GET_PROFILE_POSTS,\n  GET_PROFILE_POSTS_SUCCESS,\n  GET_SUGGESTIONS,\n  GET_SUGGESTIONS_SUCCESS,\n  GET_USER_PROFILE,\n  GET_USER_PROFILE_SUCCESS,\n  FOLLOW,\n  FOLLOW_SUCESS,\n  FOLLOW_SUCESS_SUGGESTIONS,\n  GET_ALL_POSTS,\n  GET_ALL_POSTS_SUCCESS,\n  DELETE_POST,\n  LIKE,\n  LIKE_POST_PROGRESS,\n  UNLIKE_POST_PROGRESS,\n  GET_LIKES,\n  GET_LIKES_SUCCESS,\n  FOLLOW_SUCESS_GENERIC\n} from '../constants';\n\nexport function* apiSaga() {\n  yield takeEvery(GET_USER, getUser);\n  yield takeEvery(UPDATE_USER, updateUser);\n\n  yield takeEvery(CHANGE_PROFILE_PIC, changeProfilePic);\n  yield takeEvery(CHANGE_PASSWORD, changePassword);\n\n  yield takeEvery(UPLOAD_POST, uploadPost);\n  yield takeEvery(GET_PROFILE_POSTS, getProfilePosts);\n  yield takeEvery(DELETE_POST, deletePost);\n\n  yield takeEvery(GET_SUGGESTIONS, getSuggestions);\n\n  yield takeEvery(GET_USER_PROFILE, getUserProfile);\n\n  yield takeEvery(FOLLOW, follow);\n\n  yield takeEvery(GET_ALL_POSTS, getAllPosts);\n\n  yield takeEvery(GET_LIKES, getLikes);\n\n  yield takeEvery(LIKE, updateLikeOnlyOnRedux);\n  const likePostChannel = yield actionChannel(LIKE);\n  while (true) {\n    const action = yield take(likePostChannel);\n    yield call(likePost, action);\n  }\n}\n\nfunction* deletePost({ path }) {\n  try {\n    const { message } = yield apply(client, client.delete, [path]);\n    yield put({ type: SHOW_MESSAGE, message });\n    yield put(getAllPostsAction());\n    const id = yield select(({ api }) => api.user.id);\n    yield put(userActions.get(id));\n  } catch ({ error }) {\n    console.error(error);\n    return;\n  }\n}\n\nfunction* getLikes({ path, key, params }) {\n  try {\n    const { data } = yield apply(client, client.get, [path, '']);\n    yield put({ type: GET_LIKES_SUCCESS, data, key, params });\n    return;\n  } catch ({ error }) {\n    console.error(error);\n    return;\n  }\n}\n\nfunction* getUser({ path, params }) {\n  try {\n    const { data } = yield apply(client, client.get, [path, params]);\n    yield put({ type: GET_USER_SUCCESS, data });\n    return;\n  } catch ({ error }) {\n    console.error(error);\n    yield put({ type: FORM_ERROR, error });\n    return;\n  }\n}\n\nfunction* updateUser({ path, payload, params }) {\n  try {\n    const { data, message } = yield apply(client, client.update, [\n      path,\n      params,\n      payload\n    ]);\n    yield put({ type: GET_USER_SUCCESS, data });\n    yield put({ type: CLEAR_FORM_ERROR });\n    yield put({ type: SHOW_MESSAGE, message });\n    return;\n  } catch ({ error }) {\n    console.error(error);\n    yield put({ type: FORM_ERROR, error });\n    return;\n  }\n}\n\nfunction* changeProfilePic({ path, payload, params }) {\n  try {\n    const { data, message } = yield apply(client, client.post, [\n      path,\n      params,\n      payload\n    ]);\n    yield put({ type: GET_USER_SUCCESS, data });\n    yield put({ type: SHOW_MESSAGE, message });\n    return;\n  } catch ({ error }) {\n    console.error(error);\n    return;\n  }\n}\n\nfunction* changePassword({ path, payload }) {\n  try {\n    const { message } = yield apply(client, client.update, [path, '', payload]);\n    yield put({ type: SHOW_MESSAGE, message });\n    const pathName = yield select(({ router }) => router.location.pathname);\n    yield put(push(pathName));\n    return;\n  } catch ({ error }) {\n    console.error(error);\n    yield put({ type: FORM_ERROR, error });\n    return;\n  }\n}\n\nfunction* uploadPost({ path, payload }) {\n  try {\n    const { message } = yield apply(client, client.post, [path, '', payload]);\n    yield put({ type: CLOSE_UPLOAD_POST });\n    yield put({ type: SHOW_MESSAGE, message });\n    const params = yield select(({ api }) => api.user.id);\n    yield put(userActions.get(params));\n    yield put(getAllPostsAction());\n    return;\n  } catch ({ error }) {\n    console.error(error);\n    return;\n  }\n}\n\nfunction* getProfilePosts({ path, params }) {\n  try {\n    const { data } = yield apply(client, client.get, [path, params]);\n    yield put({ type: GET_PROFILE_POSTS_SUCCESS, data });\n    return;\n  } catch ({ error }) {\n    console.error(error);\n    return;\n  }\n}\n\nfunction* getSuggestions({ path }) {\n  try {\n    const { data } = yield apply(client, client.get, [path, '']);\n    yield put({ type: GET_SUGGESTIONS_SUCCESS, data });\n    return;\n  } catch ({ error }) {\n    console.error(error);\n    return;\n  }\n}\n\nfunction* getUserProfile({ path, params, key }) {\n  try {\n    const { data, status } = yield apply(client, client.get, [path, params]);\n    yield put({ type: GET_USER_PROFILE_SUCCESS, data, status, key });\n    return;\n  } catch ({ error }) {\n    console.error(error);\n    return;\n  }\n}\n\nfunction* follow({ path, params, payload, key, namespace, postId }) {\n  try {\n    const { ownerIsFollowing, status } = yield apply(client, client.post, [\n      path,\n      params,\n      payload\n    ]);\n\n    switch (namespace) {\n      case 'profile': {\n        yield put({\n          type: FOLLOW_SUCESS,\n          data: { status, ownerIsFollowing },\n          key,\n          namespace\n        });\n        break;\n      }\n\n      case 'generic': {\n        yield put({\n          type: FOLLOW_SUCESS_GENERIC,\n          data: { status, ownerIsFollowing, id: params },\n          key,\n          namespace,\n          postId\n        });\n        yield put(getAllPostsAction());\n        break;\n      }\n\n      case 'post': {\n        yield put({\n          type: FOLLOW_SUCESS_SUGGESTIONS,\n          data: { status, ownerIsFollowing, id: params },\n          key\n        });\n        yield put(getAllPostsAction());\n        break;\n      }\n\n      default: {\n        yield put({\n          type: FOLLOW_SUCESS_SUGGESTIONS,\n          data: { status, ownerIsFollowing, id: params },\n          key\n        });\n        break;\n      }\n    }\n\n    const id = yield select(({ api }) => api.user.id);\n    yield put(userActions.get(id));\n  } catch ({ error }) {\n    console.error(error);\n    return;\n  }\n}\n\nfunction* getAllPosts({ path }) {\n  try {\n    const { data } = yield apply(client, client.get, [path, '']);\n    yield put({ type: GET_ALL_POSTS_SUCCESS, data });\n    return;\n  } catch ({ error }) {\n    console.error(error);\n    return;\n  }\n}\n\nfunction* likePost({ path, params }) {\n  try {\n    if (params.type === 'like') {\n      yield apply(client, client.post, [path, '']);\n    } else if (params.type === 'unlike') {\n      yield apply(client, client.post, [path, '']);\n    }\n    return;\n  } catch ({ error }) {\n    console.error(error);\n    yield put({\n      type: SHOW_MESSAGE,\n      message: 'Failed to complete this action.'\n    });\n    return;\n  }\n}\n\nfunction* updateLikeOnlyOnRedux({ params }) {\n  if (params.type === 'like') {\n    yield put({ type: LIKE_POST_PROGRESS, id: params.id });\n  } else if (params.type === 'unlike') {\n    yield put({ type: UNLIKE_POST_PROGRESS, id: params.id });\n  }\n  return;\n}\n"]},"metadata":{},"sourceType":"module"}