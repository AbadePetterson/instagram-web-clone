{"ast":null,"code":"import { apply, delay, put, takeEvery } from 'redux-saga/effects';\nimport { push } from 'connected-react-router';\nimport client from '../singletons/client';\nimport { SET_AUTH_TOKEN, FORM_ERROR, CLEAR_FORM_ERROR, SIGN_UP, LOG_IN, SHOW_MESSAGE, LOCATION_CHANGE, LOG_IN_SUCCESS, LOG_OUT } from '../constants';\n\nfunction* setAuthToken({\n  token,\n  userInfo: {\n    id,\n    userName\n  }\n}) {\n  const instaInfo = {\n    secret: token,\n    userId: id,\n    userName\n  };\n  yield localStorage.setItem('instaInfo', JSON.stringify(instaInfo));\n  return;\n}\n\nfunction* logIn({\n  data,\n  path\n}) {\n  try {\n    const _ref = yield apply(client, client.post, [path, '', data]),\n          message = _ref.message,\n          token = _ref.token,\n          userInfo = _ref.userInfo;\n\n    yield put({\n      type: SHOW_MESSAGE,\n      message\n    });\n    yield put({\n      type: SET_AUTH_TOKEN,\n      token,\n      userInfo\n    });\n    yield put({\n      type: LOG_IN_SUCCESS\n    });\n    yield put(push('/'));\n    client.setCustomHeaders(token);\n    return;\n  } catch (_ref2) {\n    let error = _ref2.error;\n    yield put({\n      type: FORM_ERROR,\n      error\n    });\n    return;\n  }\n}\n\nfunction* signUp({\n  data,\n  path\n}) {\n  try {\n    const response = yield apply(client, client.post, [path, '', data]);\n    yield put({\n      type: SHOW_MESSAGE,\n      message: response.message\n    });\n    yield put(push('/account/login'));\n    return response;\n  } catch (_ref3) {\n    let error = _ref3.error;\n    yield put({\n      type: FORM_ERROR,\n      error\n    });\n    return;\n  }\n}\n\nfunction* logOut() {\n  yield localStorage.removeItem('instaInfo');\n  yield delay(1000);\n  window.location.href = '/';\n  return;\n}\n\nexport function* userSaga() {\n  yield takeEvery(SIGN_UP, signUp);\n  yield takeEvery(SET_AUTH_TOKEN, setAuthToken);\n  yield takeEvery(LOG_IN, logIn);\n  yield takeEvery(LOG_OUT, logOut);\n  yield takeEvery(LOCATION_CHANGE, function* () {\n    yield put({\n      type: CLEAR_FORM_ERROR\n    });\n  });\n}","map":{"version":3,"sources":["/home/abade/projects/instagram-web-clone/src/redux/sagas/user.js"],"names":["apply","delay","put","takeEvery","push","client","SET_AUTH_TOKEN","FORM_ERROR","CLEAR_FORM_ERROR","SIGN_UP","LOG_IN","SHOW_MESSAGE","LOCATION_CHANGE","LOG_IN_SUCCESS","LOG_OUT","setAuthToken","token","userInfo","id","userName","instaInfo","secret","userId","localStorage","setItem","JSON","stringify","logIn","data","path","post","message","type","setCustomHeaders","error","signUp","response","logOut","removeItem","window","location","href","userSaga"],"mappings":"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","sourcesContent":["import { apply, delay, put, takeEvery } from 'redux-saga/effects';\nimport { push } from 'connected-react-router';\n\nimport client from '../singletons/client';\nimport {\n  SET_AUTH_TOKEN,\n  FORM_ERROR,\n  CLEAR_FORM_ERROR,\n  SIGN_UP,\n  LOG_IN,\n  SHOW_MESSAGE,\n  LOCATION_CHANGE,\n  LOG_IN_SUCCESS,\n  LOG_OUT\n} from '../constants';\n\nfunction* setAuthToken({ token, userInfo: { id, userName } }) {\n  const instaInfo = {\n    secret: token,\n    userId: id,\n    userName\n  };\n  yield localStorage.setItem('instaInfo', JSON.stringify(instaInfo));\n\n  return;\n}\n\nfunction* logIn({ data, path }) {\n  try {\n    const { message, token, userInfo } = yield apply(client, client.post, [\n      path,\n      '',\n      data\n    ]);\n    yield put({ type: SHOW_MESSAGE, message });\n    yield put({ type: SET_AUTH_TOKEN, token, userInfo });\n    yield put({ type: LOG_IN_SUCCESS });\n    yield put(push('/'));\n    client.setCustomHeaders(token);\n    return;\n  } catch ({ error }) {\n    yield put({ type: FORM_ERROR, error });\n    return;\n  }\n}\n\nfunction* signUp({ data, path }) {\n  try {\n    const response = yield apply(client, client.post, [path, '', data]);\n    yield put({ type: SHOW_MESSAGE, message: response.message });\n    yield put(push('/account/login'));\n    return response;\n  } catch ({ error }) {\n    yield put({ type: FORM_ERROR, error });\n    return;\n  }\n}\n\nfunction* logOut() {\n  yield localStorage.removeItem('instaInfo');\n  yield delay(1000);\n  window.location.href = '/';\n  return;\n}\n\nexport function* userSaga() {\n  yield takeEvery(SIGN_UP, signUp);\n  yield takeEvery(SET_AUTH_TOKEN, setAuthToken);\n  yield takeEvery(LOG_IN, logIn);\n  yield takeEvery(LOG_OUT, logOut);\n\n  yield takeEvery(LOCATION_CHANGE, function*() {\n    yield put({ type: CLEAR_FORM_ERROR });\n  });\n}\n"]},"metadata":{},"sourceType":"module"}