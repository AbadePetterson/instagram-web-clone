{"ast":null,"code":"import { fieldSubscriptionItems, formSubscriptionItems, createForm, configOptions } from 'final-form';\nimport { useRef, useState, useEffect, useCallback } from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar all = fieldSubscriptionItems.reduce(function (result, key) {\n  result[key] = true;\n  return result;\n}, {});\n\nvar subscriptionToInputs = function subscriptionToInputs(subscription) {\n  return fieldSubscriptionItems.map(function (key) {\n    return Boolean(subscription[key]);\n  });\n};\n\nvar eventValue = function eventValue(event) {\n  if (!event || !event.target) {\n    return event;\n  } else if (event.target.type === 'checkbox') {\n    return event.target.checked;\n  }\n\n  return event.target.value;\n};\n\nvar useField = function useField(name, form, validate, subscription) {\n  if (subscription === void 0) {\n    subscription = all;\n  }\n\n  var autoFocus = useRef(false);\n  var validatorRef = useRef(undefined);\n\n  var _useState = useState({}),\n      state = _useState[0],\n      setState = _useState[1];\n\n  validatorRef.current = validate;\n  var deps = subscriptionToInputs(subscription);\n  useEffect(function () {\n    return form.registerField(name, function (newState) {\n      if (autoFocus.current) {\n        autoFocus.current = false;\n        setTimeout(function () {\n          return newState.focus();\n        });\n      }\n\n      setState(newState);\n    }, subscription, validate ? {\n      getValidator: function getValidator() {\n        return validatorRef.current;\n      }\n    } : undefined);\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [name, form].concat(deps));\n\n  var blur = state.blur,\n      change = state.change,\n      focus = state.focus,\n      value = state.value,\n      meta = _objectWithoutPropertiesLoose(state, [\"blur\", \"change\", \"focus\", \"value\"]);\n\n  delete meta.name; // it's in input\n\n  return {\n    input: {\n      name: name,\n      value: value === undefined ? '' : value,\n      onBlur: function onBlur() {\n        return state.blur();\n      },\n      onChange: function onChange(event) {\n        return state.change(eventValue(event));\n      },\n      onFocus: function onFocus() {\n        if (state.focus) {\n          state.focus();\n        } else {\n          autoFocus.current = true;\n        }\n      }\n    },\n    meta: meta\n  };\n};\n\nvar all$1 = formSubscriptionItems.reduce(function (result, key) {\n  result[key] = true;\n  return result;\n}, {});\n/**\n * Converts { active: true, data: false, ... } to `[true, false, false, ...]`.\n */\n\nvar subscriptionToInputs$1 = function subscriptionToInputs(subscription) {\n  return formSubscriptionItems.map(function (key) {\n    return Boolean(subscription[key]);\n  });\n};\n\nvar useFormState = function useFormState(form, subscription) {\n  if (subscription === void 0) {\n    subscription = all$1;\n  }\n\n  var _useState = useState(function () {\n    return form.getState();\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  var deps = subscriptionToInputs$1(subscription); // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  useEffect(function () {\n    return form.subscribe(setState, subscription);\n  }, [form].concat(deps));\n  return state;\n};\n\nvar shallowEqual = function shallowEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  if (typeof a !== 'object' || !a || typeof b !== 'object' || !b) {\n    return false;\n  }\n\n  var keysA = Object.keys(a);\n  var keysB = Object.keys(b);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(b);\n\n  for (var idx = 0; idx < keysA.length; idx++) {\n    var key = keysA[idx];\n\n    if (!bHasOwnProperty(key) || a[key] !== b[key]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nvar useMemoOnce = function useMemoOnce(factory) {\n  var ref = useRef();\n\n  if (!ref.current) {\n    ref.current = factory();\n  }\n\n  return ref.current;\n};\n\nvar useForm = function useForm(_ref) {\n  var subscription = _ref.subscription,\n      _ref$initialValuesEqu = _ref.initialValuesEqual,\n      initialValuesEqual = _ref$initialValuesEqu === void 0 ? shallowEqual : _ref$initialValuesEqu,\n      config = _objectWithoutPropertiesLoose(_ref, [\"subscription\", \"initialValuesEqual\"]);\n\n  var form = useMemoOnce(function () {\n    return createForm(config);\n  });\n  var prevConfig = useRef(config);\n  var state = useFormState(form, subscription);\n  var handleSubmit = useCallback(function (event) {\n    if (event) {\n      if (typeof event.preventDefault === 'function') {\n        event.preventDefault();\n      }\n\n      if (typeof event.stopPropagation === 'function') {\n        event.stopPropagation();\n      }\n    }\n\n    return form.submit();\n  }, [form]);\n  useEffect(function () {\n    if (config === prevConfig.current) {\n      return;\n    }\n\n    if (config.initialValues && !initialValuesEqual(config.initialValues, prevConfig.current.initialValues)) {\n      form.initialize(config.initialValues);\n    }\n\n    configOptions.forEach(function (key) {\n      if (key !== 'initialValues' && config[key] !== prevConfig.current[key]) {\n        form.setConfig(key, config[key]);\n      }\n    });\n    prevConfig.current = config;\n  });\n  return _extends({}, state, {\n    form: form,\n    handleSubmit: handleSubmit\n  });\n};\n\nexport { useField, useForm, useFormState };","map":null,"metadata":{},"sourceType":"module"}