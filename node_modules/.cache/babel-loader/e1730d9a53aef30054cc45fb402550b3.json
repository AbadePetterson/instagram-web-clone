{"ast":null,"code":"import _objectSpread from \"/home/abade/projects/instagram-web-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/abade/projects/instagram-web-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/abade/projects/instagram-web-clone/src/components/UploadPost.js\";\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useForm, useField } from 'react-final-form-hooks';\nimport ReactCrop from 'react-image-crop';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Textfield from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { uploadPostAction } from '../redux/actions/api';\nimport { uploadPostDialogActions } from '../redux/actions/ui';\nimport { ErrorText, useLoader, Loader } from './utils';\nimport 'react-image-crop/dist/ReactCrop.css';\nconst useUploadPostButtonStyles = makeStyles({\n  textField: {\n    '& fieldset': {\n      border: 'none'\n    }\n  },\n  reactCrop: {\n    '& > div': {\n      gridTemplateColumns: 'minmax(auto, 600px)',\n      display: 'grid',\n      placeItems: 'center'\n    }\n  },\n  dialogTitle: {\n    textAlign: 'center'\n  },\n  dialogPaper: {\n    maxWidth: 'unset'\n  },\n  form: {\n    display: 'grid'\n  },\n  button: {\n    padding: 8\n  }\n});\nexport function UploadPostDialog({\n  inputRef,\n  src\n}) {\n  const classes = useUploadPostButtonStyles();\n\n  const _useState = useState({\n    aspect: 1,\n    width: 600\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        crop = _useState2[0],\n        setCrop = _useState2[1];\n\n  const _useState3 = useState({}),\n        _useState4 = _slicedToArray(_useState3, 2),\n        realImageDimensions = _useState4[0],\n        setRealImageDimensions = _useState4[1];\n\n  const dispatch = useDispatch();\n\n  const _useLoader = useLoader(),\n        loading = _useLoader.loading,\n        setLoading = _useLoader.setLoading,\n        formError = _useLoader.formError;\n\n  const validate = ({\n    caption\n  }) => {\n    const errors = {};\n\n    if (caption && caption.length > 150) {\n      errors.caption = 'Please enter caption fewer than 150 characters.';\n    }\n\n    return errors;\n  };\n\n  const onSubmit = ({\n    caption\n  }) => {\n    const payload = new FormData();\n    payload.append('image', inputRef.current.files[0]);\n    payload.append('caption', caption);\n    payload.append('imageCropOptions', JSON.stringify(_objectSpread({}, realImageDimensions, crop)));\n    dispatch(uploadPostAction({\n      payload\n    }));\n    setLoading(true);\n  };\n\n  const handleDialogClose = () => dispatch(uploadPostDialogActions.close());\n\n  const _useForm = useForm({\n    onSubmit,\n    validate\n  }),\n        form = _useForm.form,\n        pristine = _useForm.pristine,\n        handleSubmit = _useForm.handleSubmit,\n        submitting = _useForm.submitting,\n        submitFailed = _useForm.submitFailed,\n        errors = _useForm.errors;\n\n  const caption = useField('caption', form);\n\n  const textFieldProps = _objectSpread({}, caption.input, {\n    error: caption.meta.error && caption.meta.submitFailed,\n    multiline: true,\n    rowsMax: 2,\n    rows: 2,\n    fullWidth: true,\n    variant: 'outlined',\n    placeholder: 'Write a caption...',\n    className: classes.textField\n  });\n\n  const reactCropProps = {\n    src,\n    crop,\n    minWidth: 600,\n    locked: true,\n    className: classes.reactCrop,\n    onChange: crop => setCrop(crop),\n    onImageError: handleDialogClose,\n    onImageLoaded: image => setRealImageDimensions({\n      realImageWidth: image.width,\n      realImageHeight: image.height\n    })\n  };\n  const dialogProps = {\n    open: true,\n    onClose: handleDialogClose,\n    classes: {\n      paper: classes.dialogPaper\n    }\n  };\n  const formProps = {\n    onSubmit: handleSubmit,\n    className: classes.form,\n    encType: 'multipart/form-data'\n  };\n  const buttonProps = {\n    className: classes.button,\n    disabled: pristine || submitting || loading,\n    color: 'primary',\n    type: 'submit'\n  };\n  return React.createElement(Dialog, Object.assign({}, dialogProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }), React.createElement(DialogTitle, {\n    className: classes.dialogTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, \"New Post\"), React.createElement(ReactCrop, Object.assign({}, reactCropProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  })), React.createElement(\"form\", Object.assign({}, formProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }), React.createElement(Textfield, Object.assign({}, textFieldProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  })), React.createElement(Button, Object.assign({}, buttonProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }), loading && React.createElement(Loader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }), \"Share post\")), submitFailed && React.createElement(ErrorText, {\n    text: Object.values(errors)[0],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }), formError && React.createElement(ErrorText, {\n    text: formError,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["/home/abade/projects/instagram-web-clone/src/components/UploadPost.js"],"names":["React","useState","useDispatch","useForm","useField","ReactCrop","Button","Dialog","DialogTitle","Textfield","makeStyles","uploadPostAction","uploadPostDialogActions","ErrorText","useLoader","Loader","useUploadPostButtonStyles","textField","border","reactCrop","gridTemplateColumns","display","placeItems","dialogTitle","textAlign","dialogPaper","maxWidth","form","button","padding","UploadPostDialog","inputRef","src","classes","aspect","width","crop","setCrop","realImageDimensions","setRealImageDimensions","dispatch","loading","setLoading","formError","validate","caption","errors","length","onSubmit","payload","FormData","append","current","files","JSON","stringify","handleDialogClose","close","pristine","handleSubmit","submitting","submitFailed","textFieldProps","input","error","meta","multiline","rowsMax","rows","fullWidth","variant","placeholder","className","reactCropProps","minWidth","locked","onChange","onImageError","onImageLoaded","image","realImageWidth","realImageHeight","height","dialogProps","open","onClose","paper","formProps","encType","buttonProps","disabled","color","type","Object","values"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,OAAT,EAAkBC,QAAlB,QAAkC,wBAAlC;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AAEA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AAEA,SAASC,UAAT,QAA2B,0BAA3B;AAEA,SAASC,gBAAT,QAAiC,sBAAjC;AACA,SAASC,uBAAT,QAAwC,qBAAxC;AAEA,SAASC,SAAT,EAAoBC,SAApB,EAA+BC,MAA/B,QAA6C,SAA7C;AAEA,OAAO,qCAAP;AAEA,MAAMC,yBAAyB,GAAGN,UAAU,CAAC;AAC3CO,EAAAA,SAAS,EAAE;AACT,kBAAc;AACZC,MAAAA,MAAM,EAAE;AADI;AADL,GADgC;AAO3CC,EAAAA,SAAS,EAAE;AACT,eAAW;AACTC,MAAAA,mBAAmB,EAAE,qBADZ;AAETC,MAAAA,OAAO,EAAE,MAFA;AAGTC,MAAAA,UAAU,EAAE;AAHH;AADF,GAPgC;AAe3CC,EAAAA,WAAW,EAAE;AACXC,IAAAA,SAAS,EAAE;AADA,GAf8B;AAkB3CC,EAAAA,WAAW,EAAE;AACXC,IAAAA,QAAQ,EAAE;AADC,GAlB8B;AAsB3CC,EAAAA,IAAI,EAAE;AACJN,IAAAA,OAAO,EAAE;AADL,GAtBqC;AA0B3CO,EAAAA,MAAM,EAAE;AACNC,IAAAA,OAAO,EAAE;AADH;AA1BmC,CAAD,CAA5C;AA+BA,OAAO,SAASC,gBAAT,CAA0B;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAA1B,EAA6C;AAClD,QAAMC,OAAO,GAAGjB,yBAAyB,EAAzC;;AADkD,oBAE1Bf,QAAQ,CAAC;AAAEiC,IAAAA,MAAM,EAAE,CAAV;AAAaC,IAAAA,KAAK,EAAE;AAApB,GAAD,CAFkB;AAAA;AAAA,QAE3CC,IAF2C;AAAA,QAErCC,OAFqC;;AAAA,qBAGIpC,QAAQ,CAAC,EAAD,CAHZ;AAAA;AAAA,QAG3CqC,mBAH2C;AAAA,QAGtBC,sBAHsB;;AAIlD,QAAMC,QAAQ,GAAGtC,WAAW,EAA5B;;AAJkD,qBAKPY,SAAS,EALF;AAAA,QAK1C2B,OAL0C,cAK1CA,OAL0C;AAAA,QAKjCC,UALiC,cAKjCA,UALiC;AAAA,QAKrBC,SALqB,cAKrBA,SALqB;;AAOlD,QAAMC,QAAQ,GAAG,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAiB;AAChC,UAAMC,MAAM,GAAG,EAAf;;AACA,QAAID,OAAO,IAAIA,OAAO,CAACE,MAAR,GAAiB,GAAhC,EAAqC;AACnCD,MAAAA,MAAM,CAACD,OAAP,GAAiB,iDAAjB;AACD;;AACD,WAAOC,MAAP;AACD,GAND;;AAOA,QAAME,QAAQ,GAAG,CAAC;AAAEH,IAAAA;AAAF,GAAD,KAAiB;AAChC,UAAMI,OAAO,GAAG,IAAIC,QAAJ,EAAhB;AACAD,IAAAA,OAAO,CAACE,MAAR,CAAe,OAAf,EAAwBpB,QAAQ,CAACqB,OAAT,CAAiBC,KAAjB,CAAuB,CAAvB,CAAxB;AACAJ,IAAAA,OAAO,CAACE,MAAR,CAAe,SAAf,EAA0BN,OAA1B;AACAI,IAAAA,OAAO,CAACE,MAAR,CACE,kBADF,EAEEG,IAAI,CAACC,SAAL,mBAAoBjB,mBAApB,EAA4CF,IAA5C,EAFF;AAIAI,IAAAA,QAAQ,CAAC7B,gBAAgB,CAAC;AAAEsC,MAAAA;AAAF,KAAD,CAAjB,CAAR;AACAP,IAAAA,UAAU,CAAC,IAAD,CAAV;AACD,GAVD;;AAYA,QAAMc,iBAAiB,GAAG,MAAMhB,QAAQ,CAAC5B,uBAAuB,CAAC6C,KAAxB,EAAD,CAAxC;;AA1BkD,mBAmC9CtD,OAAO,CAAC;AACV6C,IAAAA,QADU;AAEVJ,IAAAA;AAFU,GAAD,CAnCuC;AAAA,QA6BhDjB,IA7BgD,YA6BhDA,IA7BgD;AAAA,QA8BhD+B,QA9BgD,YA8BhDA,QA9BgD;AAAA,QA+BhDC,YA/BgD,YA+BhDA,YA/BgD;AAAA,QAgChDC,UAhCgD,YAgChDA,UAhCgD;AAAA,QAiChDC,YAjCgD,YAiChDA,YAjCgD;AAAA,QAkChDf,MAlCgD,YAkChDA,MAlCgD;;AAuClD,QAAMD,OAAO,GAAGzC,QAAQ,CAAC,SAAD,EAAYuB,IAAZ,CAAxB;;AAEA,QAAMmC,cAAc,qBACfjB,OAAO,CAACkB,KADO;AAElBC,IAAAA,KAAK,EAAEnB,OAAO,CAACoB,IAAR,CAAaD,KAAb,IAAsBnB,OAAO,CAACoB,IAAR,CAAaJ,YAFxB;AAGlBK,IAAAA,SAAS,EAAE,IAHO;AAIlBC,IAAAA,OAAO,EAAE,CAJS;AAKlBC,IAAAA,IAAI,EAAE,CALY;AAMlBC,IAAAA,SAAS,EAAE,IANO;AAOlBC,IAAAA,OAAO,EAAE,UAPS;AAQlBC,IAAAA,WAAW,EAAE,oBARK;AASlBC,IAAAA,SAAS,EAAEvC,OAAO,CAAChB;AATD,IAApB;;AAWA,QAAMwD,cAAc,GAAG;AACrBzC,IAAAA,GADqB;AAErBI,IAAAA,IAFqB;AAGrBsC,IAAAA,QAAQ,EAAE,GAHW;AAIrBC,IAAAA,MAAM,EAAE,IAJa;AAKrBH,IAAAA,SAAS,EAAEvC,OAAO,CAACd,SALE;AAMrByD,IAAAA,QAAQ,EAAExC,IAAI,IAAIC,OAAO,CAACD,IAAD,CANJ;AAOrByC,IAAAA,YAAY,EAAErB,iBAPO;AAQrBsB,IAAAA,aAAa,EAAEC,KAAK,IAClBxC,sBAAsB,CAAC;AACrByC,MAAAA,cAAc,EAAED,KAAK,CAAC5C,KADD;AAErB8C,MAAAA,eAAe,EAAEF,KAAK,CAACG;AAFF,KAAD;AATH,GAAvB;AAcA,QAAMC,WAAW,GAAG;AAClBC,IAAAA,IAAI,EAAE,IADY;AAElBC,IAAAA,OAAO,EAAE7B,iBAFS;AAGlBvB,IAAAA,OAAO,EAAE;AAAEqD,MAAAA,KAAK,EAAErD,OAAO,CAACR;AAAjB;AAHS,GAApB;AAKA,QAAM8D,SAAS,GAAG;AAChBvC,IAAAA,QAAQ,EAAEW,YADM;AAEhBa,IAAAA,SAAS,EAAEvC,OAAO,CAACN,IAFH;AAGhB6D,IAAAA,OAAO,EAAE;AAHO,GAAlB;AAKA,QAAMC,WAAW,GAAG;AAClBjB,IAAAA,SAAS,EAAEvC,OAAO,CAACL,MADD;AAElB8D,IAAAA,QAAQ,EAAEhC,QAAQ,IAAIE,UAAZ,IAA0BnB,OAFlB;AAGlBkD,IAAAA,KAAK,EAAE,SAHW;AAIlBC,IAAAA,IAAI,EAAE;AAJY,GAApB;AAOA,SACE,oBAAC,MAAD,oBAAYT,WAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACE,oBAAC,WAAD;AAAa,IAAA,SAAS,EAAElD,OAAO,CAACV,WAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEE,oBAAC,SAAD,oBAAekD,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFF,EAGE,8CAAUc,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACE,oBAAC,SAAD,oBAAezB,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,EAEE,oBAAC,MAAD,oBAAY2B,WAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA0BhD,OAAO,IAAI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAArC,eAFF,CAHF,EAOGoB,YAAY,IAAI,oBAAC,SAAD;AAAW,IAAA,IAAI,EAAEgC,MAAM,CAACC,MAAP,CAAchD,MAAd,EAAsB,CAAtB,CAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPnB,EAQGH,SAAS,IAAI,oBAAC,SAAD;AAAW,IAAA,IAAI,EAAEA,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARhB,CADF;AAYD","sourcesContent":["import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useForm, useField } from 'react-final-form-hooks';\nimport ReactCrop from 'react-image-crop';\n\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Textfield from '@material-ui/core/TextField';\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { uploadPostAction } from '../redux/actions/api';\nimport { uploadPostDialogActions } from '../redux/actions/ui';\n\nimport { ErrorText, useLoader, Loader } from './utils';\n\nimport 'react-image-crop/dist/ReactCrop.css';\n\nconst useUploadPostButtonStyles = makeStyles({\n  textField: {\n    '& fieldset': {\n      border: 'none'\n    }\n  },\n\n  reactCrop: {\n    '& > div': {\n      gridTemplateColumns: 'minmax(auto, 600px)',\n      display: 'grid',\n      placeItems: 'center'\n    }\n  },\n\n  dialogTitle: {\n    textAlign: 'center'\n  },\n  dialogPaper: {\n    maxWidth: 'unset'\n  },\n\n  form: {\n    display: 'grid'\n  },\n\n  button: {\n    padding: 8\n  }\n});\n\nexport function UploadPostDialog({ inputRef, src }) {\n  const classes = useUploadPostButtonStyles();\n  const [crop, setCrop] = useState({ aspect: 1, width: 600 });\n  const [realImageDimensions, setRealImageDimensions] = useState({});\n  const dispatch = useDispatch();\n  const { loading, setLoading, formError } = useLoader();\n\n  const validate = ({ caption }) => {\n    const errors = {};\n    if (caption && caption.length > 150) {\n      errors.caption = 'Please enter caption fewer than 150 characters.';\n    }\n    return errors;\n  };\n  const onSubmit = ({ caption }) => {\n    const payload = new FormData();\n    payload.append('image', inputRef.current.files[0]);\n    payload.append('caption', caption);\n    payload.append(\n      'imageCropOptions',\n      JSON.stringify({ ...realImageDimensions, ...crop })\n    );\n    dispatch(uploadPostAction({ payload }));\n    setLoading(true);\n  };\n\n  const handleDialogClose = () => dispatch(uploadPostDialogActions.close());\n\n  const {\n    form,\n    pristine,\n    handleSubmit,\n    submitting,\n    submitFailed,\n    errors\n  } = useForm({\n    onSubmit,\n    validate\n  });\n  const caption = useField('caption', form);\n\n  const textFieldProps = {\n    ...caption.input,\n    error: caption.meta.error && caption.meta.submitFailed,\n    multiline: true,\n    rowsMax: 2,\n    rows: 2,\n    fullWidth: true,\n    variant: 'outlined',\n    placeholder: 'Write a caption...',\n    className: classes.textField\n  };\n  const reactCropProps = {\n    src,\n    crop,\n    minWidth: 600,\n    locked: true,\n    className: classes.reactCrop,\n    onChange: crop => setCrop(crop),\n    onImageError: handleDialogClose,\n    onImageLoaded: image =>\n      setRealImageDimensions({\n        realImageWidth: image.width,\n        realImageHeight: image.height\n      })\n  };\n  const dialogProps = {\n    open: true,\n    onClose: handleDialogClose,\n    classes: { paper: classes.dialogPaper }\n  };\n  const formProps = {\n    onSubmit: handleSubmit,\n    className: classes.form,\n    encType: 'multipart/form-data'\n  };\n  const buttonProps = {\n    className: classes.button,\n    disabled: pristine || submitting || loading,\n    color: 'primary',\n    type: 'submit'\n  };\n\n  return (\n    <Dialog {...dialogProps}>\n      <DialogTitle className={classes.dialogTitle}>New Post</DialogTitle>\n      <ReactCrop {...reactCropProps} />\n      <form {...formProps}>\n        <Textfield {...textFieldProps} />\n        <Button {...buttonProps}>{loading && <Loader />}Share post</Button>\n      </form>\n      {submitFailed && <ErrorText text={Object.values(errors)[0]} />}\n      {formError && <ErrorText text={formError} />}\n    </Dialog>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}