{"ast":null,"code":"import _objectSpread from \"/home/abade/projects/instagram-web-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { GET_USER_SUCCESS, GET_PROFILE_POSTS_SUCCESS, GET_SUGGESTIONS_SUCCESS, GET_USER_PROFILE_SUCCESS, FOLLOW_SUCESS_SUGGESTIONS, FOLLOW_SUCESS, GET_ALL_POSTS_SUCCESS, LIKE_POST_PROGRESS, UNLIKE_POST_PROGRESS, GET_LIKES_SUCCESS, FOLLOW_SUCESS_GENERIC } from '../constants';\nconst initialState = {\n  user: undefined,\n  profilePosts: undefined,\n  suggestions: {\n    data: undefined,\n    key: undefined\n  },\n  userProfile: {\n    data: undefined,\n    status: undefined,\n    namespace: undefined\n  },\n  allPosts: undefined,\n  customUsersList: {\n    data: undefined,\n    key: undefined\n  }\n};\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case GET_USER_SUCCESS:\n      return _objectSpread({}, state, {\n        user: action.data\n      });\n\n    case GET_PROFILE_POSTS_SUCCESS:\n      return _objectSpread({}, state, {\n        profilePosts: action.data\n      });\n\n    case GET_SUGGESTIONS_SUCCESS:\n      return _objectSpread({}, state, {\n        suggestions: {\n          data: action.data,\n          key: undefined\n        }\n      });\n\n    case GET_USER_PROFILE_SUCCESS:\n      return _objectSpread({}, state, {\n        userProfile: {\n          data: action.data,\n          status: action.status,\n          key: action.key\n        },\n        profilePosts: undefined\n      });\n\n    case FOLLOW_SUCESS_SUGGESTIONS:\n      {\n        const suggestions = suggestionsUpdater({\n          id: action.data.id,\n          state,\n          ownerIsFollowing: action.data.ownerIsFollowing\n        });\n        return _objectSpread({}, state, {\n          suggestions: {\n            data: suggestions,\n            key: action.key\n          }\n        });\n      }\n\n    case FOLLOW_SUCESS_GENERIC:\n      {\n        const list = state.customUsersList.data[action.postId].map(friend => {\n          if (friend.id === action.data.id) {\n            return _objectSpread({}, friend, {\n              ownerIsFollowing: action.data.ownerIsFollowing\n            });\n          }\n\n          return friend;\n        });\n        const suggestions = suggestionsUpdater({\n          id: action.data.id,\n          state,\n          ownerIsFollowing: action.data.ownerIsFollowing\n        });\n        return _objectSpread({}, state, {\n          customUsersList: {\n            data: _objectSpread({}, state.customUsersList.data, {\n              [action.postId]: list\n            }),\n            key: action.key\n          },\n          suggestions: _objectSpread({}, state.suggestions, {\n            data: suggestions\n          })\n        });\n      }\n\n    case FOLLOW_SUCESS:\n      {\n        let updater;\n\n        if (action.data.ownerIsFollowing) {\n          updater = {\n            followers: state.userProfile.data.followers + 1,\n            ownerIsFollowing: true\n          };\n        } else if (!action.data.ownerIsFollowing) {\n          updater = {\n            followers: state.userProfile.data.followers - 1,\n            ownerIsFollowing: false\n          };\n        }\n\n        return _objectSpread({}, state, {\n          userProfile: {\n            data: _objectSpread({}, state.userProfile.data, updater),\n            key: action.key,\n            status: action.data.status,\n            namespace: action.namespace\n          }\n        });\n      }\n\n    case GET_ALL_POSTS_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          allPosts: action.data\n        });\n      }\n\n    case LIKE_POST_PROGRESS:\n      {\n        const id = action.id;\n        const allPosts = state.allPosts.map(post => {\n          if (post.id === id) {\n            return _objectSpread({}, post, {\n              likes: post.likes + 1,\n              ownerHasLiked: true\n            });\n          }\n\n          return post;\n        });\n        return _objectSpread({}, state, {\n          allPosts\n        });\n      }\n\n    case UNLIKE_POST_PROGRESS:\n      {\n        const id = action.id;\n        const allPosts = state.allPosts.map(post => {\n          if (post.id === id) {\n            return _objectSpread({}, post, {\n              likes: post.likes - 1,\n              ownerHasLiked: false\n            });\n          }\n\n          return post;\n        });\n        return _objectSpread({}, state, {\n          allPosts\n        });\n      }\n\n    case GET_LIKES_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          customUsersList: {\n            data: _objectSpread({}, state.customUsersList.data, {\n              [action.params.id]: action.data\n            }),\n            key: action.key\n          }\n        });\n      }\n\n    default:\n      return state;\n  }\n}\n\nfunction suggestionsUpdater({\n  state,\n  id,\n  ownerIsFollowing\n}) {\n  return state.suggestions.data.map(friend => {\n    if (friend.id === id) {\n      return _objectSpread({}, friend, {\n        ownerIsFollowing\n      });\n    }\n\n    return friend;\n  });\n}","map":{"version":3,"sources":["/home/abade/projects/instagram-web-clone/src/redux/reducers/api.js"],"names":["GET_USER_SUCCESS","GET_PROFILE_POSTS_SUCCESS","GET_SUGGESTIONS_SUCCESS","GET_USER_PROFILE_SUCCESS","FOLLOW_SUCESS_SUGGESTIONS","FOLLOW_SUCESS","GET_ALL_POSTS_SUCCESS","LIKE_POST_PROGRESS","UNLIKE_POST_PROGRESS","GET_LIKES_SUCCESS","FOLLOW_SUCESS_GENERIC","initialState","user","undefined","profilePosts","suggestions","data","key","userProfile","status","namespace","allPosts","customUsersList","state","action","type","suggestionsUpdater","id","ownerIsFollowing","list","postId","map","friend","updater","followers","post","likes","ownerHasLiked","params"],"mappings":"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","sourcesContent":["import {\n  GET_USER_SUCCESS,\n  GET_PROFILE_POSTS_SUCCESS,\n  GET_SUGGESTIONS_SUCCESS,\n  GET_USER_PROFILE_SUCCESS,\n  FOLLOW_SUCESS_SUGGESTIONS,\n  FOLLOW_SUCESS,\n  GET_ALL_POSTS_SUCCESS,\n  LIKE_POST_PROGRESS,\n  UNLIKE_POST_PROGRESS,\n  GET_LIKES_SUCCESS,\n  FOLLOW_SUCESS_GENERIC\n} from '../constants';\n\nconst initialState = {\n  user: undefined,\n  profilePosts: undefined,\n  suggestions: {\n    data: undefined,\n    key: undefined\n  },\n  userProfile: {\n    data: undefined,\n    status: undefined,\n    namespace: undefined\n  },\n  allPosts: undefined,\n  customUsersList: {\n    data: undefined,\n    key: undefined\n  }\n};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case GET_USER_SUCCESS:\n      return {\n        ...state,\n        user: action.data\n      };\n\n    case GET_PROFILE_POSTS_SUCCESS:\n      return {\n        ...state,\n        profilePosts: action.data\n      };\n\n    case GET_SUGGESTIONS_SUCCESS:\n      return {\n        ...state,\n        suggestions: {\n          data: action.data,\n          key: undefined\n        }\n      };\n\n    case GET_USER_PROFILE_SUCCESS:\n      return {\n        ...state,\n        userProfile: {\n          data: action.data,\n          status: action.status,\n          key: action.key\n        },\n        profilePosts: undefined\n      };\n\n    case FOLLOW_SUCESS_SUGGESTIONS: {\n      const suggestions = suggestionsUpdater({\n        id: action.data.id,\n        state,\n        ownerIsFollowing: action.data.ownerIsFollowing\n      });\n\n      return {\n        ...state,\n        suggestions: {\n          data: suggestions,\n          key: action.key\n        }\n      };\n    }\n\n    case FOLLOW_SUCESS_GENERIC: {\n      const list = state.customUsersList.data[action.postId].map(friend => {\n        if (friend.id === action.data.id) {\n          return { ...friend, ownerIsFollowing: action.data.ownerIsFollowing };\n        }\n        return friend;\n      });\n      const suggestions = suggestionsUpdater({\n        id: action.data.id,\n        state,\n        ownerIsFollowing: action.data.ownerIsFollowing\n      });\n\n      return {\n        ...state,\n        customUsersList: {\n          data: {\n            ...state.customUsersList.data,\n            [action.postId]: list\n          },\n          key: action.key\n        },\n        suggestions: {\n          ...state.suggestions,\n          data: suggestions\n        }\n      };\n    }\n\n    case FOLLOW_SUCESS: {\n      let updater;\n      if (action.data.ownerIsFollowing) {\n        updater = {\n          followers: state.userProfile.data.followers + 1,\n          ownerIsFollowing: true\n        };\n      } else if (!action.data.ownerIsFollowing) {\n        updater = {\n          followers: state.userProfile.data.followers - 1,\n          ownerIsFollowing: false\n        };\n      }\n\n      return {\n        ...state,\n        userProfile: {\n          data: {\n            ...state.userProfile.data,\n            ...updater\n          },\n          key: action.key,\n          status: action.data.status,\n          namespace: action.namespace\n        }\n      };\n    }\n\n    case GET_ALL_POSTS_SUCCESS: {\n      return {\n        ...state,\n        allPosts: action.data\n      };\n    }\n\n    case LIKE_POST_PROGRESS: {\n      const id = action.id;\n      const allPosts = state.allPosts.map(post => {\n        if (post.id === id) {\n          return {\n            ...post,\n            likes: post.likes + 1,\n            ownerHasLiked: true\n          };\n        }\n        return post;\n      });\n\n      return {\n        ...state,\n        allPosts\n      };\n    }\n\n    case UNLIKE_POST_PROGRESS: {\n      const id = action.id;\n      const allPosts = state.allPosts.map(post => {\n        if (post.id === id) {\n          return {\n            ...post,\n            likes: post.likes - 1,\n            ownerHasLiked: false\n          };\n        }\n        return post;\n      });\n\n      return {\n        ...state,\n        allPosts\n      };\n    }\n\n    case GET_LIKES_SUCCESS: {\n      return {\n        ...state,\n        customUsersList: {\n          data: {\n            ...state.customUsersList.data,\n            [action.params.id]: action.data\n          },\n          key: action.key\n        }\n      };\n    }\n\n    default:\n      return state;\n  }\n}\n\nfunction suggestionsUpdater({ state, id, ownerIsFollowing }) {\n  return state.suggestions.data.map(friend => {\n    if (friend.id === id) {\n      return { ...friend, ownerIsFollowing };\n    }\n    return friend;\n  });\n}\n"]},"metadata":{},"sourceType":"module"}