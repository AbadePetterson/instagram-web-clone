{"ast":null,"code":"class InstaError extends Error {\n  constructor(error) {\n    super('An error occurred in API');\n\n    if (error === 'unknown endpoint') {\n      this.error = 'An error occured in API';\n    } else {\n      this.error = error;\n    }\n  }\n\n}\n\nclass Client {\n  constructor() {\n    this.baseURL = 'https://instaclone-api.now.sh';\n    this.headers = {\n      Authorization: null,\n      Accept: 'application/json'\n    };\n\n    this.client = ({\n      method,\n      url,\n      payload\n    }) => {\n      let body;\n\n      if (Object.prototype.toString.call(payload) === '[object FormData]') {\n        delete this.headers['Content-Type'];\n        body = payload;\n      } else {\n        this.headers['Content-Type'] = 'application/json';\n        body = JSON.stringify(payload);\n      }\n\n      return fetch(\"\".concat(this.baseURL).concat(url), {\n        headers: this.headers,\n        method,\n        body\n      });\n    };\n\n    if (localStorage.getItem('instaInfo')) {\n      const secret = JSON.parse(localStorage.getItem('instaInfo')).secret;\n      this.setCustomHeaders(secret);\n    }\n  }\n\n  setCustomHeaders(secret) {\n    this.headers['x-instaclone-userId'] = JSON.parse(localStorage.getItem('instaInfo')).userId;\n    this.headers.Authorization = \"Bearer \".concat(secret);\n  }\n\n  async get(path, params) {\n    const url = \"\".concat(path, \"/\").concat(params);\n\n    const _response = await this.client({\n      method: 'GET',\n      url\n    });\n\n    const response = await _response.json();\n\n    if (response.error) {\n      throw new InstaError(response.error);\n    }\n\n    return response;\n  }\n\n  async post(path, params, payload) {\n    const url = \"\".concat(path, \"/\").concat(params);\n\n    const _response = await this.client({\n      method: 'POST',\n      url,\n      payload\n    });\n\n    const response = await _response.json();\n\n    if (response.error) {\n      throw new InstaError(response.error);\n    }\n\n    return response;\n  }\n\n  async update(path, params, payload) {\n    const url = \"\".concat(path, \"/\").concat(params);\n\n    const _response = await this.client({\n      method: 'PUT',\n      url,\n      payload\n    });\n\n    const response = await _response.json();\n\n    if (response.error) {\n      throw new InstaError(response.error);\n    }\n\n    return response;\n  }\n\n  async delete(path) {\n    const response = await this.client({\n      method: 'DELETE',\n      url: path\n    });\n    const result = await response.json();\n\n    if (result.error) {\n      throw new InstaError(result.error);\n    }\n\n    return result;\n  }\n\n}\n\nconst client = new Client();\nexport default client;","map":{"version":3,"sources":["/home/abade/projects/instagram-web-clone/src/redux/singletons/client.js"],"names":["InstaError","Error","constructor","error","Client","baseURL","headers","Authorization","Accept","client","method","url","payload","body","Object","prototype","toString","call","JSON","stringify","fetch","localStorage","getItem","secret","parse","setCustomHeaders","userId","get","path","params","_response","response","json","post","update","delete","result"],"mappings":"AAAA,MAAMA,UAAN,SAAyBC,KAAzB,CAA+B;AAC7BC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAM,0BAAN;;AACA,QAAIA,KAAK,KAAK,kBAAd,EAAkC;AAChC,WAAKA,KAAL,GAAa,yBAAb;AACD,KAFD,MAEO;AACL,WAAKA,KAAL,GAAaA,KAAb;AACD;AACF;;AAR4B;;AAW/B,MAAMC,MAAN,CAAa;AACXF,EAAAA,WAAW,GAAG;AACZ,SAAKG,OAAL,GAAe,+BAAf;AACA,SAAKC,OAAL,GAAe;AACbC,MAAAA,aAAa,EAAE,IADF;AAEbC,MAAAA,MAAM,EAAE;AAFK,KAAf;;AAIA,SAAKC,MAAL,GAAc,CAAC;AAAEC,MAAAA,MAAF;AAAUC,MAAAA,GAAV;AAAeC,MAAAA;AAAf,KAAD,KAA8B;AAC1C,UAAIC,IAAJ;;AACA,UAAIC,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BL,OAA/B,MAA4C,mBAAhD,EAAqE;AACnE,eAAO,KAAKN,OAAL,CAAa,cAAb,CAAP;AACAO,QAAAA,IAAI,GAAGD,OAAP;AACD,OAHD,MAGO;AACL,aAAKN,OAAL,CAAa,cAAb,IAA+B,kBAA/B;AACAO,QAAAA,IAAI,GAAGK,IAAI,CAACC,SAAL,CAAeP,OAAf,CAAP;AACD;;AAED,aAAOQ,KAAK,WAAI,KAAKf,OAAT,SAAmBM,GAAnB,GAA0B;AACpCL,QAAAA,OAAO,EAAE,KAAKA,OADsB;AAEpCI,QAAAA,MAFoC;AAGpCG,QAAAA;AAHoC,OAA1B,CAAZ;AAKD,KAfD;;AAiBA,QAAIQ,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAJ,EAAuC;AACrC,YAAMC,MAAM,GAAGL,IAAI,CAACM,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,EAA8CC,MAA7D;AACA,WAAKE,gBAAL,CAAsBF,MAAtB;AACD;AACF;;AAEDE,EAAAA,gBAAgB,CAACF,MAAD,EAAS;AACvB,SAAKjB,OAAL,CAAa,qBAAb,IAAsCY,IAAI,CAACM,KAAL,CACpCH,YAAY,CAACC,OAAb,CAAqB,WAArB,CADoC,EAEpCI,MAFF;AAGA,SAAKpB,OAAL,CAAaC,aAAb,oBAAuCgB,MAAvC;AACD;;AAED,QAAMI,GAAN,CAAUC,IAAV,EAAgBC,MAAhB,EAAwB;AACtB,UAAMlB,GAAG,aAAMiB,IAAN,cAAcC,MAAd,CAAT;;AACA,UAAMC,SAAS,GAAG,MAAM,KAAKrB,MAAL,CAAY;AAAEC,MAAAA,MAAM,EAAE,KAAV;AAAiBC,MAAAA;AAAjB,KAAZ,CAAxB;;AACA,UAAMoB,QAAQ,GAAG,MAAMD,SAAS,CAACE,IAAV,EAAvB;;AACA,QAAID,QAAQ,CAAC5B,KAAb,EAAoB;AAClB,YAAM,IAAIH,UAAJ,CAAe+B,QAAQ,CAAC5B,KAAxB,CAAN;AACD;;AACD,WAAO4B,QAAP;AACD;;AAED,QAAME,IAAN,CAAWL,IAAX,EAAiBC,MAAjB,EAAyBjB,OAAzB,EAAkC;AAChC,UAAMD,GAAG,aAAMiB,IAAN,cAAcC,MAAd,CAAT;;AACA,UAAMC,SAAS,GAAG,MAAM,KAAKrB,MAAL,CAAY;AAAEC,MAAAA,MAAM,EAAE,MAAV;AAAkBC,MAAAA,GAAlB;AAAuBC,MAAAA;AAAvB,KAAZ,CAAxB;;AACA,UAAMmB,QAAQ,GAAG,MAAMD,SAAS,CAACE,IAAV,EAAvB;;AACA,QAAID,QAAQ,CAAC5B,KAAb,EAAoB;AAClB,YAAM,IAAIH,UAAJ,CAAe+B,QAAQ,CAAC5B,KAAxB,CAAN;AACD;;AACD,WAAO4B,QAAP;AACD;;AAED,QAAMG,MAAN,CAAaN,IAAb,EAAmBC,MAAnB,EAA2BjB,OAA3B,EAAoC;AAClC,UAAMD,GAAG,aAAMiB,IAAN,cAAcC,MAAd,CAAT;;AACA,UAAMC,SAAS,GAAG,MAAM,KAAKrB,MAAL,CAAY;AAClCC,MAAAA,MAAM,EAAE,KAD0B;AAElCC,MAAAA,GAFkC;AAGlCC,MAAAA;AAHkC,KAAZ,CAAxB;;AAKA,UAAMmB,QAAQ,GAAG,MAAMD,SAAS,CAACE,IAAV,EAAvB;;AACA,QAAID,QAAQ,CAAC5B,KAAb,EAAoB;AAClB,YAAM,IAAIH,UAAJ,CAAe+B,QAAQ,CAAC5B,KAAxB,CAAN;AACD;;AACD,WAAO4B,QAAP;AACD;;AAED,QAAMI,MAAN,CAAaP,IAAb,EAAmB;AACjB,UAAMG,QAAQ,GAAG,MAAM,KAAKtB,MAAL,CAAY;AAAEC,MAAAA,MAAM,EAAE,QAAV;AAAoBC,MAAAA,GAAG,EAAEiB;AAAzB,KAAZ,CAAvB;AACA,UAAMQ,MAAM,GAAG,MAAML,QAAQ,CAACC,IAAT,EAArB;;AACA,QAAII,MAAM,CAACjC,KAAX,EAAkB;AAChB,YAAM,IAAIH,UAAJ,CAAeoC,MAAM,CAACjC,KAAtB,CAAN;AACD;;AACD,WAAOiC,MAAP;AACD;;AA9EU;;AAiFb,MAAM3B,MAAM,GAAG,IAAIL,MAAJ,EAAf;AACA,eAAeK,MAAf","sourcesContent":["class InstaError extends Error {\n  constructor(error) {\n    super('An error occurred in API');\n    if (error === 'unknown endpoint') {\n      this.error = 'An error occured in API';\n    } else {\n      this.error = error;\n    }\n  }\n}\n\nclass Client {\n  constructor() {\n    this.baseURL = 'https://instaclone-api.now.sh';\n    this.headers = {\n      Authorization: null,\n      Accept: 'application/json'\n    };\n    this.client = ({ method, url, payload }) => {\n      let body;\n      if (Object.prototype.toString.call(payload) === '[object FormData]') {\n        delete this.headers['Content-Type'];\n        body = payload;\n      } else {\n        this.headers['Content-Type'] = 'application/json';\n        body = JSON.stringify(payload);\n      }\n\n      return fetch(`${this.baseURL}${url}`, {\n        headers: this.headers,\n        method,\n        body\n      });\n    };\n\n    if (localStorage.getItem('instaInfo')) {\n      const secret = JSON.parse(localStorage.getItem('instaInfo')).secret;\n      this.setCustomHeaders(secret);\n    }\n  }\n\n  setCustomHeaders(secret) {\n    this.headers['x-instaclone-userId'] = JSON.parse(\n      localStorage.getItem('instaInfo')\n    ).userId;\n    this.headers.Authorization = `Bearer ${secret}`;\n  }\n\n  async get(path, params) {\n    const url = `${path}/${params}`;\n    const _response = await this.client({ method: 'GET', url });\n    const response = await _response.json();\n    if (response.error) {\n      throw new InstaError(response.error);\n    }\n    return response;\n  }\n\n  async post(path, params, payload) {\n    const url = `${path}/${params}`;\n    const _response = await this.client({ method: 'POST', url, payload });\n    const response = await _response.json();\n    if (response.error) {\n      throw new InstaError(response.error);\n    }\n    return response;\n  }\n\n  async update(path, params, payload) {\n    const url = `${path}/${params}`;\n    const _response = await this.client({\n      method: 'PUT',\n      url,\n      payload\n    });\n    const response = await _response.json();\n    if (response.error) {\n      throw new InstaError(response.error);\n    }\n    return response;\n  }\n\n  async delete(path) {\n    const response = await this.client({ method: 'DELETE', url: path });\n    const result = await response.json();\n    if (result.error) {\n      throw new InstaError(result.error);\n    }\n    return result;\n  }\n}\n\nconst client = new Client();\nexport default client;\n"]},"metadata":{},"sourceType":"module"}